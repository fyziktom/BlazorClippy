@inject ClippyService clippy 

<Card>
    <CardHeader>
        <Span>Identified Items</Span>
        <HashToCopy Hash="@Analyzer.MarkerExtensionHash" />
        <AddAnalyzedDataItem @ref=addAnalyzedDataItemRef 
                             Added="@OnAddedDataItemHandler" 
                             WithButton="true" 
                             WithButtonIcon=true 
                             WithButtonText="false" 
                             FloatButton="Float.End" 
                             Item="@(new AnalyzedObjectDataItem())" />
        <Tooltip Float="Float.End" Text="Download Items as file">
            <Button Color="Color.Light" Clicked="@BackupDataItems"><Icon Name="IconName.Download" /></Button>
        </Tooltip>
        <Tooltip Float="Float.End" Text="Show Items as MindMap">
            <Button Color="Color.Light" Clicked="@(async () => await loadMermaid())"><Icon Name="IconName.Map" /></Button>
        </Tooltip>
    </CardHeader>
    <CardBody>
        @if (Analyzer != null && Analyzer.DataItems.Count > 0)
        {
            <Accordion>
                @foreach (var item in Analyzer.DataItems.Values.OrderBy(i => !i.IsIdentified))
                {
                    var isVisible = IsVisibleItem(item.Id);
                    <Collapse Visible="@isVisible">
                        <CollapseHeader>
                            @item.Name
                            @if (item.IsIdentified)
                            {
                                <Badge Color="Color.Success" Margin="Margin.Is2.FromStart">Is Identified</Badge>
                            }
                            else
                            {
                                <Badge Color="Color.Warning" Margin="Margin.Is2.FromStart">Not Identified yet</Badge>
                            }
                            <Button Float="Float.End" Clicked="@(() => SetVisiblility(item.Id))">
                                @if (isVisible)
                                {
                                    <Icon Name="IconName.ArrowUp" />
                                }
                                else
                                {
                                    <Icon Name="IconName.ArrowDown" />
                                }
                            </Button>
                            <HashToCopy Hash="@item.CapturedMarkerDetailedHash" Float="Float.End" />
                        
                        </CollapseHeader>
                        <CollapseBody>
                            <AnalyzedDataItemComponent Item="@item" />
                            <Button Color="Color.Light" Clicked="@(async () => await removeItem(item.CapturedMarker))" Float="Float.End" Margin="Margin.Is2.FromStart" ><Icon Name="IconName.Delete" TextColor="TextColor.Danger" /></Button>
                         </CollapseBody>
                    </Collapse>
                }
            </Accordion>
        }
    </CardBody>
</Card>

<ShowMermaid @ref=showMermaidRef BlockButton="false" WithButton="false" ModalTitle="Data Items" />

@code {
    [Inject] IMessageService MessageService { get; set; }

    [Parameter]
    public WatsonAssistantAnalyzer Analyzer { get; set; } = new WatsonAssistantAnalyzer();

    public Dictionary<string, bool> visibleItems { get; set; } = new Dictionary<string, bool>();

    string mermaidText = string.Empty;
    ShowMermaid? showMermaidRef;
    AddAnalyzedDataItem? addAnalyzedDataItemRef;

    private bool IsVisibleItem(string id)
    {
        if (visibleItems.TryGetValue(id, out var res))
            return res;
        else
            return false;
    }

    private void SetVisiblility(string id)
    {
        if (visibleItems.TryGetValue(id, out var res))
            visibleItems[id] = !res;
        else
            visibleItems.TryAdd(id, true);
        StateHasChanged();
    }

    private async Task removeItem(string id)
    {
        if (await MessageService.Confirm("Are you sure you want to delete this Item?", "Delete Item"))
        {
            if (clippy.Analyzer.RemoveDataItem(id))
            {
                await InvokeAsync(StateHasChanged);
                if (visibleItems.ContainsKey(id))
                    visibleItems.Remove(id);
            }
        }
    }

    private async Task loadMermaid()
    {
        if (clippy != null)
        {
            var data = clippy.Analyzer.DataItemsOrderedByName.Where(v => v.Value != null).Select(v => v.Value).ToList();
            if (data != null && data.Count > 0)
            {
                mermaidText = AnalyzerHelpers.GetMermaidMindMapFromAnalyzedDataItems(data);

                if (showMermaidRef != null)
                    await showMermaidRef.Load(mermaidText, true);
            }
        }
    }

    private async Task BackupDataItems(MouseEventArgs e)
    {
        await clippy.SaveDataItemsAsMermaid();
    }

    private void OnAddedDataItemHandler(string id)
    {
        StateHasChanged();
    }
}
