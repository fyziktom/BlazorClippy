@inject ClippyService clippy

<LoadingIndicator @ref=loadingIndicator>
    <Row Margin="Margin.Is2.FromTop">
        <Column>
            <Addons>
                <Addon AddonType="AddonType.Body">
                    <TextEdit Placeholder="Type your question please"
                              Text="@Question"
                              TextChanged="@(async (e) => await SetValue(e))"
                              KeyPress="onInputKeyPress" />
                </Addon>
                <Addon AddonType="AddonType.End">
                    <Button Color="Color.Primary" Clicked="@(async () => await AskWatson(Question))">Ask</Button>
                </Addon>
            </Addons>
        </Column>
    </Row>
</LoadingIndicator>

@code {
    [Parameter]
    public bool SpeakAnswersWithClippy { get; set; } = false;
    [Parameter]
    public string SessionId { get; set; }  = string.Empty;
    [Parameter]
    public string Question { get; set; } = string.Empty;
    [Parameter]
    public EventCallback<string> QuestionChanged { get; set; }
    [Parameter]
    public EventCallback<(string, WatsonMessageRequestRecord?)> OnMessageReceived { get; set; }

    LoadingIndicator? loadingIndicator;
    string response = string.Empty;
    MD5 cryptHandler = new MD5();

    private async Task SetValue(string value)
    {
        if (value != null)
            Question = value;
        else
            Question = string.Empty;
    }

    async Task onInputKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
            await AskWatson(Question);
    }

    async Task AskWatson(string inputquestion)
    {
        if (loadingIndicator != null)
            await loadingIndicator.Show();

        var maxsentenses = 3;

        var questionextension = clippy.Analyzer.MarkerExtension;

        cryptHandler.Value = questionextension;
        var hash = cryptHandler.FingerPrint;

        if (clippy.Analyzer.IsSomeMatch)
            inputquestion = inputquestion + " " + hash;

        var resp = await clippy.AskWatson(inputquestion, SessionId, analyzer: clippy.Analyzer);
        if (resp.Item1)
        {
            if (resp.Item2 != null && resp.Item2.MessageRecord != null)
            {
                var matchresult = clippy.Analyzer.MatchDataItems(resp.Item2.MessageRecord);
                // get new list of identified items
                clippy.LastCapturedDataItems = clippy.Analyzer.GetIdentifiedDataItemsDetailedMarkers();

                response = resp.Item2.answer;
                await OnMessageReceived.InvokeAsync((response, resp.Item2.MessageRecord));
                // speak with clippy
                var split = resp.Item2.answer.Split('.');
                if (split != null && split.Length > 0)
                {
                    if (split.Length <= maxsentenses)
                    {
                        if (SpeakAnswersWithClippy)
                            await clippy.Speak(resp.Item2.answer);
                    }
                    else
                    {
                        var splitcount = 0;
                        var speak = string.Empty;
                        foreach (var sentense in split)
                        {
                            speak += sentense + ". ";
                            splitcount++;
                            if (splitcount >= maxsentenses)
                            {
                                if (SpeakAnswersWithClippy)
                                    await clippy.Speak(speak);
                                speak = string.Empty;
                                splitcount = 0;
                            }
                        }
                    }
                }
            }

            if (loadingIndicator != null)
                await loadingIndicator.Hide();

            Question = "";
            await QuestionChanged.InvokeAsync(Question);
        }
        else
        {
            Console.WriteLine("Cannot get answer for the question:" + inputquestion);
            response = "Cannot get answer for the question.";
            if (SpeakAnswersWithClippy)
                await clippy.Speak(response);
            await OnMessageReceived.InvokeAsync((response, null));
        }
    }
}
