@inject ClippyService clippy

<Modal @ref="AddModal">
    <ModalContent Centered Size="ModalSize.ExtraLarge">
        <ModalHeader>
            <ModalTitle>@(!changing ? "Add" : "Change") Item</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            @if (Item != null)
            {
                <Row>
                    <Column>
                        <Field>
                            <FieldLabel>Name</FieldLabel>
                            <TextEdit Placeholder="Item Name" Text="@Item.Name" TextChanged="@onNameChanged" />
                        </Field>
                    </Column>
                </Row>
                <Row>
                    <Column>
                        <Field>
                            <FieldLabel>Intent</FieldLabel>
                            <Addons>
                                <Addon AddonType="AddonType.Start">
                                    <Heading Size="HeadingSize.Is5" Margin="Margin.Is2.FromEnd.Is2.FromTop">#</Heading>
                                </Addon>
                                <Addon AddonType="AddonType.Body">
                                    <Autocomplete TItem="string"
                                                  TValue="string"
                                                  Data="@intentsAutocomplete"
                                                  TextField="@(( item ) => item)"
                                                  ValueField="@(( item ) => item)"
                                                  Placeholder="Add Intent"
                                                  FreeTyping
                                                  @bind-SelectedText="@newIntent"
                                                  @bind-SelectedValue="@newIntentAutocompleted"
                                                  Filter="AutocompleteFilter.StartsWith"
                                                  @onkeypress="@((e) => onInputKeyPressIntent(e))">
                                    </Autocomplete>
                                </Addon>
                                <Addon AddonType="AddonType.End">
                                    <Button Clicked="@AddIntent" ><Icon Name="IconName.Add" /></Button>
                                </Addon>
                            </Addons>
                        </Field>
                    </Column>
                    <Column>
                        <Field>
                            <FieldLabel>Entity</FieldLabel>
                            <Addons>
                                <Addon AddonType="AddonType.Start" >
                                    <Heading Size="HeadingSize.Is5" Margin="Margin.Is2.FromEnd.Is2.FromTop">@("@")</Heading>
                                </Addon>
                                <Addon AddonType="AddonType.Body">
                                        <Autocomplete TItem="string"
                                                      TValue="string"
                                                      Data="@entitiesAutocomplete"
                                                      TextField="@(( item ) => item)"
                                                      ValueField="@(( item ) => item)"
                                                      Placeholder="Add Entity"
                                                      FreeTyping
                                                      @bind-SelectedText="@newEntity"
                                                      @bind-SelectedValue="@newEntityAutocompleted"
                                                      Filter="AutocompleteFilter.StartsWith"
                                                      @onkeypress="@((e) => onInputKeyPressEntity(e))">
                                        </Autocomplete>
                                </Addon>
                                <Addon AddonType="AddonType.End">
                                    <Button Clicked="@AddEntity"><Icon Name="IconName.Add" /></Button>
                                </Addon>
                            </Addons>
                        </Field>
                    </Column>
                </Row>
                <Row>
                    <Column>
                        <IntentsList Item="@Item" />
                    </Column>
                    <Column>
                        <EntitiesList Item="@Item" />
                    </Column>
                </Row>
                <Row Margin="Margin.Is2.FromTop">
                    <Column>
                        <PanzoomMermaid @ref="mermaidViewRef" />
                    </Column>
                </Row>
                <Row>
                    <Column>
                        @if (changing)
                        {
                            <Button Color="Color.Primary" Outline Clicked="@change">Change Item</Button>
                        }
                        else
                        {
                            <Button Color="Color.Primary" Outline Clicked="@add">Add Item</Button>
                        }
                    </Column>
                </Row>
            }
        </ModalBody>
    </ModalContent>
</Modal>

@if (WithButton)
{
    <Tooltip Float="@FloatButton" Text="@ToolTipText">
    <Button Color="Color.Primary" Block="@BlockButton" Outline Float="@FloatButton" Clicked="@openAddModal">
        <Row>
            @if (WithButtonIcon)
            {
                <Column>
                    <Icon Name="IconName.Add" />
                </Column>
            }
            @if (WithButtonText)
            {
                <Column Margin="Margin.Is2.FromStart">
                    @ButtonText
                </Column>
            }
        </Row>
    </Button>
    </Tooltip>
}

@code {
    [Inject] IMessageService MessageService { get; set; }

    [Parameter]
    public bool WithButton { get; set; } = false;
    [Parameter]
    public bool BlockButton { get; set; } = false;
    [Parameter]
    public Float FloatButton { get; set; } = Float.Default;
    [Parameter]
    public bool WithButtonIcon { get; set; } = false;
    [Parameter]
    public bool WithButtonText { get; set; } = false;
    [Parameter]
    public string ButtonText { get; set; } = "Add Item";
    [Parameter]
    public string ToolTipText { get; set; } = "Add New Item";
    [Parameter]
    public EventCallback<string> Added { get; set; }
    [Parameter]
    public AnalyzedObjectDataItem? Item { get; set; }

    PanzoomMermaid? mermaidViewRef;
    Modal? AddModal;
    bool changing = false;
    string newIntent = string.Empty;
    string newIntentAutocompleted = string.Empty;
    string newEntity = string.Empty;
    string newEntityAutocompleted = string.Empty;
    string mermaidText = string.Empty;

    List<string> intentsAutocomplete = AnalyzerHelpers.DefaultTestIntents;
    List<string> entitiesAutocomplete = AnalyzerHelpers.DefaultTestEntities;

    [Inject] INotificationService NotificationService { get; set; }

    public async Task Load(AnalyzedObjectDataItem input, bool showmodal = false, bool changeofitem = false)
    {
        if (input != null)
            Item = input;

        if (showmodal)
        {
            if (AddModal != null)
            {
                await AddModal.Show();
                await InvokeAsync(StateHasChanged);
                await loadMermaid();
            }
        }
        changing = changeofitem;
        await InvokeAsync(StateHasChanged);
    }

    private async Task onNameChanged(string name)
    {
        if (Item != null && name != null)
            Item.Name = name;
        await loadMermaid();
    }

    private async Task loadMermaid()
    {
        if (Item != null)
        {
            if (string.IsNullOrEmpty(Item.Name))
                Item.Name = "default";

            mermaidText = "classDiagram\r\n";
            mermaidText += AnalyzerHelpers.GetMermaidFromDataItem(Item);

            if (Item.Name == "default")
                Item.Name = string.Empty;

            if (mermaidViewRef != null)
                await mermaidViewRef.LoadText(mermaidText);
        }
    }

    private async Task openAddModal()
    {
        if (AddModal != null)
        {
            changing = false;
            await AddModal.Show();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task onInputKeyPressIntent(KeyboardEventArgs e)
    {
        if (e != null && e.Key == "Enter")
            await AddIntent(null);
    }

    private async Task onInputKeyPressEntity(KeyboardEventArgs e)
    {
        if (e != null && e.Key == "Enter")
            await AddEntity(null);
    }

    private async Task AddIntent(MouseEventArgs e)
    {
        if (!string.IsNullOrEmpty(newIntent))
        {
            if (Item != null && Item.Intents.FirstOrDefault(i => i.Intent == newIntent) == null)
            {
                Item.Intents.Add(new RuntimeIntent()
                {
                     Intent = newIntent
                });
                await loadMermaid();
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    private async Task AddEntity(MouseEventArgs e)
    {
        if (!string.IsNullOrEmpty(newEntity))
        {
            var refresh = false;
            var split = newEntity.Split(':', StringSplitOptions.RemoveEmptyEntries);
            if (split != null && split.Length > 1)
            {
                var entity = split[0];
                var value = split[1];
                if (Item != null && Item.Entities.FirstOrDefault(i => i.Entity == entity && i.Value == value) == null)
                {
                    Item.Entities.Add(new RuntimeEntity()
                        {
                            Entity = entity,
                            Value = value
                        });
                }
                refresh = true;
            }
            else if (split != null && split.Length == 1)
            {
                var entity = split[0];
                if (Item != null && Item.Entities.FirstOrDefault(i => i.Entity == entity && string.IsNullOrEmpty(i.Value)) == null)
                {
                    Item.Entities.Add(new RuntimeEntity()
                        {
                            Entity = entity
                        });
                }
                refresh = true;
            }
            else if (split != null && split.Length == 0)
            {
                if (Item != null && Item.Entities.FirstOrDefault(i => i.Entity == newEntity && string.IsNullOrEmpty(i.Value)) == null)
                {
                    Item.Entities.Add(new RuntimeEntity()
                        {
                            Entity = newEntity
                        });
                }
                refresh = true;
            }
            if (refresh)
            {
                await loadMermaid();
                await InvokeAsync(StateHasChanged);                
            }
        }
    }

    private void OnDataItemRefreshedHandler(string id)
    {
        StateHasChanged();
    }

    private async Task add()
    {
        if (!await MessageService.Confirm("Are you sure you want to add this Item?", "Add Item"))
        {
            return;
        }
        if (Item == null)
        {
            await NotificationService.Error("Panel cannot be null.", "Cannot Add Item");
            return;
        }
        if (string.IsNullOrEmpty(Item.Name))
        {
            await NotificationService.Error("Please fill the name of the item", "Cannot Add Item");
            return;
        }

        var result = clippy.Analyzer.AddDataItem(Item);

        if (AddModal != null)
            await AddModal.Hide();

        await NotificationService.Success($"Item {Item.Name} added.", "Add Item");

        await Added.InvokeAsync(Item.Id);
    }

    async Task change()
    {

    }
}
