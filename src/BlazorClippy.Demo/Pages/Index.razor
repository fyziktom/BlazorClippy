@using BlazorClippyWatson.Analzyer
@using BlazorClippyWatson.Common
@using IBM.Watson.Assistant.v2.Model

@page "/"
@inject ClippyService clippy
@inject AppData AppData
@inject HttpClient Http

<PageTitle>Clippy Demo</PageTitle>

<LoadWatson @bind-SessionId="@SessionId" />

<Row Margin="Margin.Is4.FromTop">
        <Column>
        @if (!string.IsNullOrEmpty(SessionId))
        {
            <Row Margin="Margin.Is2.FromTop">
                <Column>
                    <Small>SessionId: @SessionId</Small>
                </Column>
            </Row>
            <BackupChatHistory SessionId="@SessionId" />
            <Divider />
            <QuestionBar OnMessageReceived="@OnMessageReceivedHandler" />
            <MessagesList @ref=messageListRef SessionId="@SessionId" />                    
        }
    </Column>
    <Column>
        <IdentifiedItemsList Analyzer="@clippy.Analyzer" />
    </Column>
</Row>

@code {
    public string SessionId { get; set; } = string.Empty;
    string response = "";
    MessagesList? messageListRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // create data items which should be captured
            var storeddataitems = await Http.GetStringAsync("dataitems.mmd");
            if (storeddataitems != null)
                await clippy.LoadDataItemsFromMermaid(storeddataitems);
        }
        base.OnAfterRender(firstRender);
    }

    private async Task OnMessageReceivedHandler((string, WatsonMessageRequestRecord) e)
    {
        response = e.Item1;
        if (messageListRef != null)
            await messageListRef.Refresh();
        await InvokeAsync(StateHasChanged);
    }

}